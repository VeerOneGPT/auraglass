version: '3.8'

services:
  # Redis cache service
  redis:
    image: redis:7-alpine
    container_name: aura-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 3s
      retries: 3
    networks:
      - aura-network

  # API Server
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: aura-api
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=production
      - API_PORT=3002
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - PINECONE_API_KEY=${PINECONE_API_KEY}
      - GOOGLE_VISION_API_KEY=${GOOGLE_VISION_API_KEY}
      - REMOVEBG_API_KEY=${REMOVEBG_API_KEY}
      - SENTRY_DSN=${SENTRY_DSN}
    depends_on:
      - redis
    command: node server/api-server.js
    restart: unless-stopped
    networks:
      - aura-network
    volumes:
      - ./logs:/app/logs

  # WebSocket Server
  websocket:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: aura-websocket
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - WS_PORT=3001
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - CLIENT_URL=${CLIENT_URL:-http://localhost:3000}
    depends_on:
      - redis
    command: node server/websocket-server.js
    restart: unless-stopped
    networks:
      - aura-network

  # Frontend Application
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
      target: builder
    container_name: aura-frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=http://api:3002
      - REACT_APP_WEBSOCKET_URL=ws://websocket:3001
    depends_on:
      - api
      - websocket
    command: npm start
    restart: unless-stopped
    networks:
      - aura-network
    volumes:
      - ./dist:/app/dist:ro

  # Nginx Reverse Proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: aura-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./dist:/usr/share/nginx/html:ro
    depends_on:
      - api
      - websocket
      - frontend
    restart: unless-stopped
    networks:
      - aura-network

networks:
  aura-network:
    driver: bridge

volumes:
  redis-data:
    driver: local