import type { Meta, StoryObj } from "@storybook/react";
import React from "react";
import {
  ColorAdaptationDemo,
  IntelligentColorProvider,
} from "./IntelligentColorSystem";
const meta: Meta<typeof IntelligentColorProvider> = {
  title: "Advanced/IntelligentColorSystem",
  component: IntelligentColorProvider,
  parameters: {
    docs: {
      description: {
        component:
          "AI-powered color adaptation system that analyzes content, adapts to time, season, and brand colors with intelligent color schemes and accessibility compliance.",
      },
    },
    layout: "fullscreen",
  },
  tags: ["autodocs"],
};

export default meta;
type Story = StoryObj<typeof IntelligentColorProvider>;

export const InteractiveDemo: Story = {
  args: {},
  render: () => {
    const [mousePos, setMousePos] = React.useState({ x: 0, y: 0 });
    const [activeCard, setActiveCard] = React.useState<number | null>(null);
    const containerRef = React.useRef<HTMLDivElement>(null);
    
    React.useEffect(() => {
      const handleMouseMove = (e: MouseEvent) => {
        if (containerRef.current) {
          const rect = containerRef.current.getBoundingClientRect();
          setMousePos({
            x: ((e.clientX - rect.left) / rect.width) * 100,
            y: ((e.clientY - rect.top) / rect.height) * 100
          });
        }
      };
      
      document.addEventListener('mousemove', handleMouseMove);
      return () => document.removeEventListener('mousemove', handleMouseMove);
    }, []);
    
    return (
    <div 
      ref={containerRef}
      className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 p-8 relative overflow-hidden cursor-none"
      style={{
        background: `radial-gradient(600px circle at ${mousePos.x}% ${mousePos.y}%, rgba(147,51,234,0.15), transparent 50%),
                     linear-gradient(135deg, rgb(15 23 42), rgb(88 28 135), rgb(15 23 42))`
      }}
    >
      {/* Custom cursor */}
      <div 
        className="fixed w-4 h-4 bg-white/30 rounded-full pointer-events-none z-50 transition-all duration-150 ease-out"
        style={{
          left: `${mousePos.x}vw`,
          top: `${mousePos.y}vh`,
          transform: 'translate(-50%, -50%)',
          boxShadow: '0 0 20px rgba(255,255,255,0.5), inset 0 0 20px rgba(255,255,255,0.2)'
        }}
      />
      
      {/* Ambient background glow - now mouse-reactive */}
      <div 
        className="absolute inset-0 bg-gradient-radial from-purple-600/20 via-transparent to-transparent pointer-events-none transition-all duration-1000"
        style={{
          background: `radial-gradient(800px circle at ${mousePos.x}% ${mousePos.y}%, rgba(147,51,234,0.25), transparent 70%)`
        }}
      />
      
      <div className="max-w-5xl mx-auto text-center relative z-10">
        <div className="mb-12">
          <div className="inline-flex items-center gap-3 mb-6 px-4 py-2 rounded-full bg-white/5 backdrop-blur border border-white/10">
            <div className="w-2 h-2 bg-emerald-400 rounded-full animate-pulse" />
            <span className="text-sm text-white/60 font-medium tracking-wide">INTELLIGENT ADAPTATION</span>
          </div>
          <h1 className="text-5xl font-bold text-white mb-4 bg-gradient-to-r from-white via-purple-100 to-cyan-100 bg-clip-text text-transparent">
            Color System Demo
          </h1>
          <p className="text-lg text-white/50 font-light max-w-2xl mx-auto leading-relaxed">
            Experience AI-powered color adaptation that responds to context, mood, and environment
          </p>
        </div>
        
        <div className="bg-white/[0.08] backdrop-blur-xl rounded-3xl p-10 shadow-2xl border border-white/10 relative group hover:bg-white/[0.12] transition-all duration-700">
          {/* Inner glow effect */}
          <div className="absolute inset-0 rounded-3xl bg-gradient-to-br from-white/5 via-transparent to-purple-500/5 opacity-0 group-hover:opacity-100 transition-opacity duration-700" />
          
          <h3 className="text-2xl font-semibold text-white mb-3">
            Interactive Color Adaptation
          </h3>
          <p className="text-white/60 mb-10 max-w-xl mx-auto leading-relaxed">
            Watch colors intelligently adapt and harmonize in real-time
          </p>
          
          {/* Enhanced color palette with magnetic effects */}
          <div className="grid grid-cols-3 gap-6">
            {[
              { name: 'Ocean', colors: ['from-blue-400', 'to-blue-600'], delay: '0ms', glow: 'blue' },
              { name: 'Mystique', colors: ['from-purple-400', 'to-purple-600'], delay: '150ms', glow: 'purple' },
              { name: 'Aurora', colors: ['from-cyan-400', 'to-cyan-600'], delay: '300ms', glow: 'cyan' }
            ].map((card, index) => {
              const distance = Math.sqrt(
                Math.pow((mousePos.x - (33 + index * 33)), 2) + 
                Math.pow((mousePos.y - 50), 2)
              );
              const magneticForce = Math.max(0, 20 - distance) * 0.5;
              
              return (
                <div 
                  key={card.name}
                  className="group/card cursor-pointer"
                  style={{ 
                    animationDelay: card.delay,
                    animation: 'slideUpStagger 0.8s cubic-bezier(0.16, 1, 0.3, 1) forwards'
                  }}
                  onMouseEnter={() => setActiveCard(index)}
                  onMouseLeave={() => setActiveCard(null)}
                >
                  <div 
                    className={`bg-gradient-to-br ${card.colors[0]} ${card.colors[1]} h-32 rounded-2xl shadow-lg relative overflow-hidden transition-all duration-500`}
                    style={{
                      transform: `scale(${1 + magneticForce * 0.02}) translateY(${-magneticForce * 0.3}px)`,
                      boxShadow: `0 ${8 + magneticForce}px ${16 + magneticForce * 2}px rgba(${card.glow === 'blue' ? '59, 130, 246' : card.glow === 'purple' ? '147, 51, 234' : '6, 182, 212'}, ${0.15 + magneticForce * 0.01})`
                    }}
                  >
                    {/* Magnetic field visualization */}
                    <div 
                      className="absolute inset-0 opacity-20 transition-opacity duration-300"
                      style={{
                        background: `radial-gradient(circle at center, rgba(255,255,255,${magneticForce * 0.02}), transparent 70%)`,
                        opacity: magneticForce > 5 ? 1 : 0
                      }}
                    />
                    
                    {/* Dynamic particle effects */}
                    {activeCard === index && [
                      <div key="p1" className="absolute w-1 h-1 bg-white/60 rounded-full animate-ping" style={{ top: '20%', left: '30%', animationDelay: '0s' }} />,
                      <div key="p2" className="absolute w-1 h-1 bg-white/40 rounded-full animate-ping" style={{ top: '70%', right: '25%', animationDelay: '0.5s' }} />,
                      <div key="p3" className="absolute w-1 h-1 bg-white/50 rounded-full animate-bounce" style={{ top: '50%', left: '60%', animationDelay: '1s' }} />
                    ]}
                    
                    <div className="absolute inset-0 bg-gradient-to-t from-black/20 to-transparent" />
                    
                    {/* Enhanced label with sound wave visualization */}
                    <div className="absolute bottom-3 left-3 flex items-center gap-2">
                      <div className="text-white/90 font-medium text-sm">{card.name}</div>
                      {activeCard === index && (
                        <div className="flex items-center gap-1">
                          {[1,2,3].map(i => (
                            <div key={i} className="w-0.5 bg-white/60 rounded-full animate-pulse" style={{ 
                              height: `${4 + Math.random() * 8}px`,
                              animationDelay: `${i * 0.1}s`
                            }} />
                          ))}
                        </div>
                      )}
                    </div>
                    
                    {/* Hover ripple effect */}
                    <div className="absolute inset-0 opacity-0 group-hover/card:opacity-100 transition-opacity duration-300">
                      <div className="absolute inset-0 bg-gradient-to-br from-white/10 to-transparent animate-pulse" />
                    </div>
                  </div>
                </div>
              )
            })}
          </div>
          
          {/* Subtle call-to-action */}
          <div className="mt-8 flex justify-center">
            <button className="px-6 py-3 bg-white/10 hover:bg-white/15 backdrop-blur border border-white/20 rounded-xl text-white font-medium transition-all duration-300 hover:scale-105">
              Explore Adaptations
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export const TimeBasedAdaptation: Story = {
  args: {},
  render: () => (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 p-8 relative">
      {/* Dynamic ambient lighting */}
      <div className="absolute inset-0 bg-gradient-conic from-amber-500/10 via-blue-500/10 via-orange-500/10 to-indigo-500/10 animate-pulse" />
      
      <div className="max-w-6xl mx-auto text-center relative z-10">
        <div className="mb-16">
          <div className="inline-flex items-center gap-2 mb-6 px-5 py-2 rounded-full bg-white/5 backdrop-blur border border-white/10">
            <div className="w-2 h-2 bg-gradient-to-r from-amber-400 to-indigo-400 rounded-full" />
            <span className="text-sm text-white/60 font-medium tracking-wider">CIRCADIAN ADAPTATION</span>
          </div>
          <h2 className="text-4xl font-bold text-white mb-4">
            Time-Based Color Evolution
          </h2>
          <p className="text-white/60 max-w-2xl mx-auto leading-relaxed">
            Colors that intelligently shift throughout the day, matching natural light patterns and human circadian rhythms
          </p>
        </div>
        
        <div className="grid grid-cols-2 md:grid-cols-4 gap-8">
          {/* Dawn */}
          <div className="group cursor-pointer">
            <div className="relative overflow-hidden rounded-3xl transition-all duration-700 hover:scale-105">
              <div className="bg-gradient-to-br from-amber-400 via-rose-300 to-amber-500 aspect-square relative shadow-2xl hover:shadow-amber-500/30">
                {/* Time indicator */}
                <div className="absolute top-4 left-4 text-xs bg-black/20 backdrop-blur px-3 py-1 rounded-full text-white/90 font-medium">
                  5:30 AM
                </div>
                
                {/* Main icon */}
                <div className="absolute inset-0 flex items-center justify-center">
                  <div className="text-6xl mb-2 filter drop-shadow-lg">🌅</div>
                </div>
                
                {/* Bottom info */}
                <div className="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/40 to-transparent p-6">
                  <div className="font-bold text-white text-lg">Dawn</div>
                  <div className="text-white/80 text-sm font-medium">Warm Awakening</div>
                </div>
                
                {/* Hover overlay */}
                <div className="absolute inset-0 bg-gradient-to-br from-white/10 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-500" />
              </div>
            </div>
          </div>
          
          {/* Day */}
          <div className="group cursor-pointer">
            <div className="relative overflow-hidden rounded-3xl transition-all duration-700 hover:scale-105">
              <div className="bg-gradient-to-br from-sky-400 via-cyan-300 to-blue-500 aspect-square relative shadow-2xl hover:shadow-blue-500/30">
                <div className="absolute top-4 left-4 text-xs bg-black/20 backdrop-blur px-3 py-1 rounded-full text-white/90 font-medium">
                  12:00 PM
                </div>
                
                <div className="absolute inset-0 flex items-center justify-center">
                  <div className="text-6xl mb-2 filter drop-shadow-lg">☀️</div>
                </div>
                
                <div className="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/40 to-transparent p-6">
                  <div className="font-bold text-white text-lg">Day</div>
                  <div className="text-white/80 text-sm font-medium">Bright Focus</div>
                </div>
                
                <div className="absolute inset-0 bg-gradient-to-br from-white/10 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-500" />
              </div>
            </div>
          </div>
          
          {/* Evening */}
          <div className="group cursor-pointer">
            <div className="relative overflow-hidden rounded-3xl transition-all duration-700 hover:scale-105">
              <div className="bg-gradient-to-br from-orange-400 via-red-400 to-pink-500 aspect-square relative shadow-2xl hover:shadow-orange-500/30">
                <div className="absolute top-4 left-4 text-xs bg-black/20 backdrop-blur px-3 py-1 rounded-full text-white/90 font-medium">
                  7:30 PM
                </div>
                
                <div className="absolute inset-0 flex items-center justify-center">
                  <div className="text-6xl mb-2 filter drop-shadow-lg">🌆</div>
                </div>
                
                <div className="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/40 to-transparent p-6">
                  <div className="font-bold text-white text-lg">Evening</div>
                  <div className="text-white/80 text-sm font-medium">Golden Warmth</div>
                </div>
                
                <div className="absolute inset-0 bg-gradient-to-br from-white/10 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-500" />
              </div>
            </div>
          </div>
          
          {/* Night */}
          <div className="group cursor-pointer">
            <div className="relative overflow-hidden rounded-3xl transition-all duration-700 hover:scale-105">
              <div className="bg-gradient-to-br from-indigo-500 via-purple-500 to-slate-600 aspect-square relative shadow-2xl hover:shadow-indigo-500/30">
                <div className="absolute top-4 left-4 text-xs bg-black/20 backdrop-blur px-3 py-1 rounded-full text-white/90 font-medium">
                  11:00 PM
                </div>
                
                <div className="absolute inset-0 flex items-center justify-center">
                  <div className="text-6xl mb-2 filter drop-shadow-lg">🌙</div>
                </div>
                
                <div className="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/40 to-transparent p-6">
                  <div className="font-bold text-white text-lg">Night</div>
                  <div className="text-white/80 text-sm font-medium">Deep Rest</div>
                </div>
                
                <div className="absolute inset-0 bg-gradient-to-br from-white/10 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-500" />
              </div>
            </div>
          </div>
        </div>
        
        {/* Feature highlights */}
        <div className="mt-16 grid grid-cols-1 md:grid-cols-3 gap-6">
          <div className="bg-white/5 backdrop-blur border border-white/10 rounded-2xl p-6">
            <div className="text-2xl mb-3">🌡️</div>
            <h4 className="text-white font-semibold mb-2">Temperature Sync</h4>
            <p className="text-white/60 text-sm">Matches color temperature to natural light cycles</p>
          </div>
          <div className="bg-white/5 backdrop-blur border border-white/10 rounded-2xl p-6">
            <div className="text-2xl mb-3">🧠</div>
            <h4 className="text-white font-semibold mb-2">Circadian Support</h4>
            <p className="text-white/60 text-sm">Optimizes colors for better sleep and focus</p>
          </div>
          <div className="bg-white/5 backdrop-blur border border-white/10 rounded-2xl p-6">
            <div className="text-2xl mb-3">⚡</div>
            <h4 className="text-white font-semibold mb-2">Auto-Transition</h4>
            <p className="text-white/60 text-sm">Seamlessly adapts throughout the day</p>
          </div>
        </div>
      </div>
    </div>
  ),
};

export const SeasonalThemes: Story = {
  args: {},
  render: () => (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 p-8 relative overflow-hidden">
      {/* Seasonal ambient particles */}
      <div className="absolute inset-0 pointer-events-none">
        <div className="absolute top-20 left-20 w-2 h-2 bg-green-300/30 rounded-full animate-bounce" style={{animationDelay: '0s'}} />
        <div className="absolute top-40 right-32 w-1 h-1 bg-cyan-300/40 rounded-full animate-ping" style={{animationDelay: '1s'}} />
        <div className="absolute bottom-32 left-40 w-3 h-3 bg-orange-300/20 rounded-full animate-pulse" style={{animationDelay: '2s'}} />
        <div className="absolute bottom-20 right-20 w-2 h-2 bg-blue-300/30 rounded-full animate-bounce" style={{animationDelay: '3s'}} />
      </div>
      
      <div className="max-w-7xl mx-auto relative z-10">
        <div className="text-center mb-16">
          <div className="inline-flex items-center gap-3 mb-6 px-5 py-3 rounded-full bg-white/5 backdrop-blur-lg border border-white/10">
            <div className="w-3 h-3 bg-gradient-to-r from-green-400 via-cyan-400 via-orange-400 to-indigo-400 rounded-full animate-spin" />
            <span className="text-sm text-white/70 font-medium tracking-wider">SEASONAL INTELLIGENCE</span>
          </div>
          <h2 className="text-5xl font-bold mb-6 bg-gradient-to-r from-white via-green-100 via-cyan-100 via-orange-100 to-indigo-100 bg-clip-text text-transparent">
            Nature-Inspired Palettes
          </h2>
          <p className="text-lg text-white/60 max-w-3xl mx-auto leading-relaxed">
            Colors that evolve with the seasons, capturing the essence of nature's palette throughout the year
          </p>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-4 gap-8 mb-16">
          {/* Spring */}
          <div className="group relative">
            <div className="bg-gradient-to-br from-green-400 via-emerald-300 to-pink-400 rounded-3xl p-8 relative overflow-hidden shadow-2xl transition-all duration-700 hover:scale-105 hover:shadow-green-500/20">
              {/* Seasonal texture overlay */}
              <div className="absolute inset-0 bg-gradient-to-br from-white/10 via-transparent to-green-500/10 opacity-50" />
              
              {/* Weather info */}
              <div className="absolute top-4 left-4 right-4 flex justify-between items-center">
                <div className="text-xs bg-black/20 backdrop-blur px-3 py-1 rounded-full text-white/90 font-medium">
                  68°F - 75°F
                </div>
                <div className="text-xs bg-black/20 backdrop-blur px-3 py-1 rounded-full text-white/90 font-medium">
                  Mar - May
                </div>
              </div>
              
              {/* Main content */}
              <div className="text-center pt-8">
                <div className="text-6xl mb-4 filter drop-shadow-lg">🌸</div>
                <h3 className="text-2xl font-bold text-white mb-2">Spring</h3>
                <p className="text-white/80 text-sm mb-4 font-medium">Fresh & Blooming</p>
                
                {/* Color palette preview */}
                <div className="flex gap-2 mb-6 justify-center">
                  <div className="w-4 h-4 bg-green-300 rounded-full shadow-sm" />
                  <div className="w-4 h-4 bg-pink-300 rounded-full shadow-sm" />
                  <div className="w-4 h-4 bg-yellow-300 rounded-full shadow-sm" />
                </div>
              </div>
              
              {/* Hover effect */}
              <div className="absolute inset-0 bg-gradient-to-t from-black/10 to-transparent opacity-0 group-hover:opacity-100 transition-all duration-500" />
            </div>
            
            {/* Action button */}
            <button className="w-full mt-4 bg-white/10 hover:bg-white/15 backdrop-blur border border-white/20 text-white font-medium py-3 px-6 rounded-2xl transition-all duration-300 hover:scale-105 group-hover:bg-green-500/20">
              Apply Spring Theme
            </button>
          </div>

          {/* Summer */}
          <div className="group relative">
            <div className="bg-gradient-to-br from-cyan-400 via-sky-300 to-orange-400 rounded-3xl p-8 relative overflow-hidden shadow-2xl transition-all duration-700 hover:scale-105 hover:shadow-cyan-500/20">
              <div className="absolute inset-0 bg-gradient-to-br from-white/10 via-transparent to-cyan-500/10 opacity-50" />
              
              <div className="absolute top-4 left-4 right-4 flex justify-between items-center">
                <div className="text-xs bg-black/20 backdrop-blur px-3 py-1 rounded-full text-white/90 font-medium">
                  78°F - 88°F
                </div>
                <div className="text-xs bg-black/20 backdrop-blur px-3 py-1 rounded-full text-white/90 font-medium">
                  Jun - Aug
                </div>
              </div>
              
              <div className="text-center pt-8">
                <div className="text-6xl mb-4 filter drop-shadow-lg">🏖️</div>
                <h3 className="text-2xl font-bold text-white mb-2">Summer</h3>
                <p className="text-white/80 text-sm mb-4 font-medium">Vibrant & Energetic</p>
                
                <div className="flex gap-2 mb-6 justify-center">
                  <div className="w-4 h-4 bg-cyan-300 rounded-full shadow-sm" />
                  <div className="w-4 h-4 bg-orange-300 rounded-full shadow-sm" />
                  <div className="w-4 h-4 bg-yellow-400 rounded-full shadow-sm" />
                </div>
              </div>
              
              <div className="absolute inset-0 bg-gradient-to-t from-black/10 to-transparent opacity-0 group-hover:opacity-100 transition-all duration-500" />
            </div>
            
            <button className="w-full mt-4 bg-white/10 hover:bg-white/15 backdrop-blur border border-white/20 text-white font-medium py-3 px-6 rounded-2xl transition-all duration-300 hover:scale-105 group-hover:bg-cyan-500/20">
              Apply Summer Theme
            </button>
          </div>

          {/* Autumn */}
          <div className="group relative">
            <div className="bg-gradient-to-br from-orange-400 via-red-400 to-yellow-400 rounded-3xl p-8 relative overflow-hidden shadow-2xl transition-all duration-700 hover:scale-105 hover:shadow-orange-500/20">
              <div className="absolute inset-0 bg-gradient-to-br from-white/10 via-transparent to-orange-500/10 opacity-50" />
              
              <div className="absolute top-4 left-4 right-4 flex justify-between items-center">
                <div className="text-xs bg-black/20 backdrop-blur px-3 py-1 rounded-full text-white/90 font-medium">
                  58°F - 68°F
                </div>
                <div className="text-xs bg-black/20 backdrop-blur px-3 py-1 rounded-full text-white/90 font-medium">
                  Sep - Nov
                </div>
              </div>
              
              <div className="text-center pt-8">
                <div className="text-6xl mb-4 filter drop-shadow-lg">🍂</div>
                <h3 className="text-2xl font-bold text-white mb-2">Autumn</h3>
                <p className="text-white/80 text-sm mb-4 font-medium">Warm & Cozy</p>
                
                <div className="flex gap-2 mb-6 justify-center">
                  <div className="w-4 h-4 bg-orange-400 rounded-full shadow-sm" />
                  <div className="w-4 h-4 bg-red-400 rounded-full shadow-sm" />
                  <div className="w-4 h-4 bg-yellow-400 rounded-full shadow-sm" />
                </div>
              </div>
              
              <div className="absolute inset-0 bg-gradient-to-t from-black/10 to-transparent opacity-0 group-hover:opacity-100 transition-all duration-500" />
            </div>
            
            <button className="w-full mt-4 bg-white/10 hover:bg-white/15 backdrop-blur border border-white/20 text-white font-medium py-3 px-6 rounded-2xl transition-all duration-300 hover:scale-105 group-hover:bg-orange-500/20">
              Apply Autumn Theme
            </button>
          </div>

          {/* Winter */}
          <div className="group relative">
            <div className="bg-gradient-to-br from-indigo-400 via-slate-300 to-cyan-400 rounded-3xl p-8 relative overflow-hidden shadow-2xl transition-all duration-700 hover:scale-105 hover:shadow-indigo-500/20">
              <div className="absolute inset-0 bg-gradient-to-br from-white/10 via-transparent to-indigo-500/10 opacity-50" />
              
              <div className="absolute top-4 left-4 right-4 flex justify-between items-center">
                <div className="text-xs bg-black/20 backdrop-blur px-3 py-1 rounded-full text-white/90 font-medium">
                  32°F - 45°F
                </div>
                <div className="text-xs bg-black/20 backdrop-blur px-3 py-1 rounded-full text-white/90 font-medium">
                  Dec - Feb
                </div>
              </div>
              
              <div className="text-center pt-8">
                <div className="text-6xl mb-4 filter drop-shadow-lg">❄️</div>
                <h3 className="text-2xl font-bold text-white mb-2">Winter</h3>
                <p className="text-white/80 text-sm mb-4 font-medium">Cool & Serene</p>
                
                <div className="flex gap-2 mb-6 justify-center">
                  <div className="w-4 h-4 bg-indigo-300 rounded-full shadow-sm" />
                  <div className="w-4 h-4 bg-cyan-300 rounded-full shadow-sm" />
                  <div className="w-4 h-4 bg-slate-300 rounded-full shadow-sm" />
                </div>
              </div>
              
              <div className="absolute inset-0 bg-gradient-to-t from-black/10 to-transparent opacity-0 group-hover:opacity-100 transition-all duration-500" />
            </div>
            
            <button className="w-full mt-4 bg-white/10 hover:bg-white/15 backdrop-blur border border-white/20 text-white font-medium py-3 px-6 rounded-2xl transition-all duration-300 hover:scale-105 group-hover:bg-indigo-500/20">
              Apply Winter Theme
            </button>
          </div>
        </div>
        
        {/* Advanced features showcase */}
        <div className="bg-white/5 backdrop-blur-xl rounded-3xl p-10 border border-white/10">
          <h3 className="text-2xl font-semibold text-white text-center mb-8">Advanced Seasonal Intelligence</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            <div className="text-center p-4">
              <div className="text-3xl mb-3">🌡️</div>
              <h4 className="text-white font-semibold mb-2">Climate Aware</h4>
              <p className="text-white/60 text-sm">Adapts to local weather patterns and temperature</p>
            </div>
            <div className="text-center p-4">
              <div className="text-3xl mb-3">🌍</div>
              <h4 className="text-white font-semibold mb-2">Geographic Sync</h4>
              <p className="text-white/60 text-sm">Considers hemisphere and regional seasonal variations</p>
            </div>
            <div className="text-center p-4">
              <div className="text-3xl mb-3">📅</div>
              <h4 className="text-white font-semibold mb-2">Calendar Smart</h4>
              <p className="text-white/60 text-sm">Seamlessly transitions between seasonal periods</p>
            </div>
            <div className="text-center p-4">
              <div className="text-3xl mb-3">🎨</div>
              <h4 className="text-white font-semibold mb-2">Cultural Themes</h4>
              <p className="text-white/60 text-sm">Incorporates cultural color associations and holidays</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  ),
};

export const BrandIntegration: Story = {
  args: {},
  render: () => {
    const [selectedBrand, setSelectedBrand] = React.useState<string | null>(null);
    const [harmonyScore, setHarmonyScore] = React.useState(0);
    const [colorAnalysis, setColorAnalysis] = React.useState<any>(null);
    const [isAnalyzing, setIsAnalyzing] = React.useState(false);
    
    // Brand color data with advanced metrics
    const brands = {
      apple: { 
        primary: '#007AFF', 
        secondary: '#5856D6', 
        accent: '#FF3B30',
        warmth: 65,
        energy: 80,
        trust: 85,
        personality: 'Innovative & Clean'
      },
      google: { 
        primary: '#4285F4', 
        secondary: '#34A853', 
        accent: '#FBBC05',
        warmth: 72,
        energy: 90,
        trust: 78,
        personality: 'Playful & Accessible'
      },
      microsoft: { 
        primary: '#0078D4', 
        secondary: '#106EBE', 
        accent: '#00BCF2',
        warmth: 60,
        energy: 75,
        trust: 90,
        personality: 'Professional & Reliable'
      }
    };
    
    const analyzeBrandHarmony = React.useCallback(async (brandKey: string) => {
      setIsAnalyzing(true);
      setColorAnalysis(null);
      
      // Simulate AI color analysis
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      const brand = brands[brandKey as keyof typeof brands];
      const analysis = {
        dominant: brand.primary,
        palette: [brand.primary, brand.secondary, brand.accent],
        mood: brand.personality,
        contrast: Math.floor(Math.random() * 30) + 70, // 70-100
        accessibility: Math.floor(Math.random() * 20) + 80, // 80-100
        emotion: {
          trust: brand.trust,
          energy: brand.energy,
          warmth: brand.warmth
        },
        recommendations: [
          'Increase secondary color saturation by 8%',
          'Add subtle gradient transitions',
          'Consider warmer accent tones for evening themes'
        ]
      };
      
      setColorAnalysis(analysis);
      setHarmonyScore(Math.floor(Math.random() * 20) + 85);
      setIsAnalyzing(false);
    }, [brands]);
    
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 p-8 relative overflow-hidden">
      {/* Dynamic background that changes with selected brand */}
      <div 
        className="absolute inset-0 opacity-10 transition-all duration-1000 ease-out"
        style={{
          background: selectedBrand ? `radial-gradient(circle at 30% 40%, ${brands[selectedBrand as keyof typeof brands]?.primary}40, transparent 50%), radial-gradient(circle at 80% 20%, ${brands[selectedBrand as keyof typeof brands]?.secondary}30, transparent 50%)` : 'none'
        }}
      />
      
      <div className="max-w-7xl mx-auto relative z-10">
        <div className="text-center mb-12">
          <div className="inline-flex items-center gap-3 mb-6 px-5 py-3 rounded-full bg-white/5 backdrop-blur-xl border border-white/10">
            <div className="w-3 h-3 bg-gradient-to-r from-blue-400 to-green-400 rounded-full" style={{ 
              boxShadow: '0 0 10px currentColor',
              animation: isAnalyzing ? 'spin 2s linear infinite' : 'none'
            }} />
            <span className="text-sm text-white/70 font-medium tracking-wider">
              {isAnalyzing ? 'ANALYZING BRAND DNA...' : 'BRAND INTELLIGENCE'}
            </span>
          </div>
          <h2 className="text-5xl font-bold mb-4 bg-gradient-to-r from-white via-blue-100 to-green-100 bg-clip-text text-transparent">
            Brand Color Harmonization
          </h2>
          <p className="text-lg text-white/60 max-w-3xl mx-auto leading-relaxed">
            AI-powered brand color analysis with real-time harmony scoring and accessibility optimization
          </p>
        </div>

        {/* Interactive Brand Cards */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-8 mb-12">
          {Object.entries(brands).map(([key, brand], index) => {
            const isSelected = selectedBrand === key;
            const isActive = selectedBrand === key;
            
            return (
              <div 
                key={key}
                className={`group relative transition-all duration-700 ${isSelected ? 'scale-105' : 'hover:scale-102'}`}
                style={{ animationDelay: `${index * 200}ms` }}
              >
                {/* Brand card with real-time data */}
                <div 
                  className={`relative overflow-hidden rounded-3xl p-8 backdrop-blur-xl border transition-all duration-500 ${
                    isSelected 
                      ? 'bg-white/15 border-white/30 shadow-2xl' 
                      : 'bg-white/8 border-white/10 hover:bg-white/12'
                  }`}
                  style={{
                    background: isSelected ? `linear-gradient(135deg, ${brand.primary}20, ${brand.secondary}15)` : undefined,
                    boxShadow: isSelected ? `0 20px 40px ${brand.primary}30, 0 0 80px ${brand.primary}15` : undefined
                  }}
                >
                  {/* Live metrics overlay */}
                  {isSelected && (
                    <div className="absolute top-4 right-4 flex gap-2">
                      <div className="px-2 py-1 bg-green-500/20 backdrop-blur rounded-full text-xs text-green-300 font-medium">
                        {harmonyScore}% Harmony
                      </div>
                    </div>
                  )}
                  
                  {/* Brand identity */}
                  <div className="text-center mb-6">
                    <div className="text-5xl mb-4">
                      {key === 'apple' && '🍎'}
                      {key === 'google' && '🔍'} 
                      {key === 'microsoft' && '🪟'}
                    </div>
                    <h3 className="text-2xl font-bold text-white mb-2 capitalize">{key}</h3>
                    <p className="text-white/60 text-sm font-medium">{brand.personality}</p>
                  </div>
                  
                  {/* Color palette preview */}
                  <div className="flex justify-center gap-3 mb-6">
                    <div 
                      className="w-8 h-8 rounded-full shadow-lg transition-transform duration-300 hover:scale-110"
                      style={{ background: brand.primary, boxShadow: `0 4px 12px ${brand.primary}40` }}
                    />
                    <div 
                      className="w-8 h-8 rounded-full shadow-lg transition-transform duration-300 hover:scale-110"
                      style={{ background: brand.secondary, boxShadow: `0 4px 12px ${brand.secondary}40` }}
                    />
                    <div 
                      className="w-8 h-8 rounded-full shadow-lg transition-transform duration-300 hover:scale-110"
                      style={{ background: brand.accent, boxShadow: `0 4px 12px ${brand.accent}40` }}
                    />
                  </div>
                  
                  {/* Emotional metrics */}
                  <div className="space-y-2 mb-6">
                    {[
                      { label: 'Trust', value: brand.trust, color: 'blue' },
                      { label: 'Energy', value: brand.energy, color: 'orange' },
                      { label: 'Warmth', value: brand.warmth, color: 'pink' }
                    ].map(metric => (
                      <div key={metric.label} className="flex items-center justify-between text-sm">
                        <span className="text-white/70">{metric.label}</span>
                        <div className="flex items-center gap-2">
                          <div className="w-16 h-1.5 bg-white/20 rounded-full overflow-hidden">
                            <div 
                              className={`h-full bg-${metric.color}-400 rounded-full transition-all duration-1000 ease-out`}
                              style={{ width: `${isSelected ? metric.value : 0}%` }}
                            />
                          </div>
                          <span className="text-white/90 font-medium text-xs w-8">{metric.value}%</span>
                        </div>
                      </div>
                    ))}
                  </div>
                  
                  {/* Action button */}
                  <button 
                    onClick={() => {
                      setSelectedBrand(key);
                      analyzeBrandHarmony(key);
                    }}
                    disabled={isAnalyzing}
                    className={`w-full py-3 px-6 rounded-xl font-medium transition-all duration-300 relative overflow-hidden group/btn ${
                      isAnalyzing && selectedBrand === key
                        ? 'bg-white/10 text-white/50'
                        : isSelected
                        ? 'bg-white/20 text-white hover:bg-white/25'
                        : 'bg-white/10 text-white hover:bg-white/15'
                    }`}
                    style={{
                      background: isSelected ? `linear-gradient(135deg, ${brand.primary}40, ${brand.secondary}30)` : undefined
                    }}
                  >
                    <span className="relative z-10">
                      {isAnalyzing && selectedBrand === key ? 'Analyzing...' : isSelected ? 'Active Brand' : 'Analyze Brand'}
                    </span>
                    {!isAnalyzing && (
                      <div className="absolute inset-0 bg-gradient-to-r from-white/0 via-white/10 to-white/0 translate-x-full group-hover/btn:translate-x-0 transition-transform duration-500" />
                    )}
                  </button>
                </div>
              </div>
            );
          })}
        </div>

        {/* Real-time Analysis Dashboard */}
        {colorAnalysis && (
          <div className="bg-white/8 backdrop-blur-xl rounded-3xl p-8 border border-white/10 mb-12">
            <div className="flex items-center gap-3 mb-6">
              <div className="w-3 h-3 bg-green-400 rounded-full animate-pulse" />
              <h3 className="text-2xl font-semibold text-white">Live Brand Analysis</h3>
              <div className="ml-auto px-4 py-2 bg-green-500/20 backdrop-blur rounded-full text-sm text-green-300 font-medium">
                Score: {harmonyScore}/100
              </div>
            </div>
            
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
              {/* Color metrics */}
              <div className="space-y-4">
                <h4 className="text-white font-semibold mb-3">Color Performance</h4>
                {[
                  { label: 'Contrast Ratio', value: colorAnalysis.contrast, target: '4.5:1 WCAG AA' },
                  { label: 'Accessibility Score', value: colorAnalysis.accessibility, target: '95+% Target' },
                  { label: 'Brand Consistency', value: harmonyScore, target: '90+% Optimal' }
                ].map(metric => (
                  <div key={metric.label} className="space-y-2">
                    <div className="flex justify-between text-sm">
                      <span className="text-white/70">{metric.label}</span>
                      <span className="text-white/90">{metric.value}% · {metric.target}</span>
                    </div>
                    <div className="w-full h-2 bg-white/20 rounded-full overflow-hidden">
                      <div 
                        className={`h-full rounded-full transition-all duration-1000 ${
                          metric.value >= 90 ? 'bg-green-400' : metric.value >= 70 ? 'bg-yellow-400' : 'bg-red-400'
                        }`}
                        style={{ width: `${metric.value}%` }}
                      />
                    </div>
                  </div>
                ))}
              </div>
              
              {/* AI Recommendations */}
              <div className="space-y-4">
                <h4 className="text-white font-semibold mb-3">AI Recommendations</h4>
                <div className="space-y-3">
                  {colorAnalysis.recommendations.map((rec: string, index: number) => (
                    <div key={index} className="flex items-start gap-3 p-3 bg-white/5 rounded-xl">
                      <div className="w-2 h-2 bg-blue-400 rounded-full mt-2 flex-shrink-0" />
                      <span className="text-white/80 text-sm leading-relaxed">{rec}</span>
                    </div>
                  ))}
                </div>
                
                {/* Emotional impact */}
                <div className="mt-6 p-4 bg-gradient-to-r from-purple-500/10 to-blue-500/10 rounded-xl">
                  <h5 className="text-white font-medium mb-2">Emotional Impact</h5>
                  <div className="text-sm text-white/70">
                    This palette evokes <span className="text-white font-medium">{colorAnalysis.mood}</span> feelings with 
                    <span className="text-blue-300"> {colorAnalysis.emotion.trust}% trust</span>, 
                    <span className="text-orange-300"> {colorAnalysis.emotion.energy}% energy</span>, and 
                    <span className="text-pink-300"> {colorAnalysis.emotion.warmth}% warmth</span>.
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}
        
        {/* Advanced Features Grid */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          {[
            { icon: '🧠', title: 'AI Analysis', desc: 'Machine learning color psychology insights' },
            { icon: '⚡', title: 'Real-time', desc: 'Live brand harmony scoring and feedback' },
            { icon: '🎯', title: 'Smart Blending', desc: 'Intelligent color palette harmonization' },
            { icon: '♿', title: 'Accessibility', desc: 'WCAG AA+ compliance with auto-optimization' }
          ].map((feature, index) => (
            <div 
              key={feature.title}
              className="bg-white/5 backdrop-blur border border-white/10 rounded-2xl p-6 text-center transition-all duration-500 hover:bg-white/8 hover:scale-105"
              style={{ animationDelay: `${index * 100}ms` }}
            >
              <div className="text-3xl mb-3">{feature.icon}</div>
              <h4 className="text-white font-semibold mb-2">{feature.title}</h4>
              <p className="text-white/60 text-sm leading-relaxed">{feature.desc}</p>
            </div>
          ))}
        </div>
      </div>
    );
  },
};

export const QuantumNeuromorphicDemo: Story = {
  args: {},
  render: () => {
    const [quantumState, setQuantumState] = React.useState({
      superposition: true,
      collapsedState: null as string | null,
      probability: { state1: 0.33, state2: 0.33, state3: 0.34 },
      entangled: new Set<number>(),
      measurement: false
    });
    const [biometricData, setBiometricData] = React.useState({
      stressLevel: 0.3,
      focusState: 0.7,
      interactionPattern: 'calm',
      heartRate: 72
    });
    const [neuralWeights, setNeuralWeights] = React.useState({
      primary: 0.8,
      secondary: 0.6,
      tertiary: 0.4,
      adaptationRate: 0.1
    });
    const [consciousness, setConsciousness] = React.useState({
      stream: [] as string[],
      depth: 3,
      coherence: 0.85
    });
    const [gestureState, setGestureState] = React.useState({
      activeGestures: new Set<string>(),
      gestureHistory: [] as any[],
      multiTouchPoints: [] as any[],
      gesture3D: { x: 0, y: 0, z: 0, rotation: 0 },
      recognizedPattern: null as string | null,
      gestureSequence: [] as string[]
    });
    const [ecosystem, setEcosystem] = React.useState({
      organisms: [] as any[],
      resources: { light: 0.8, nutrients: 0.6, water: 0.7 },
      population: { predators: 0, prey: 0, producers: 0, decomposers: 0 },
      biodiversity: 0,
      ecosystem_health: 0.75
    });
    
    // Quantum measurement handler
    const measureQuantumState = React.useCallback(() => {
      if (!quantumState.superposition) return;
      
      const rand = Math.random();
      let collapsedState = 'state1';
      if (rand > 0.33 && rand <= 0.66) collapsedState = 'state2';
      else if (rand > 0.66) collapsedState = 'state3';
      
      setQuantumState(prev => ({
        ...prev,
        superposition: false,
        collapsedState,
        measurement: true
      }));
      
      // Update consciousness stream
      setConsciousness(prev => ({
        ...prev,
        stream: [...prev.stream.slice(-4), `Quantum measurement: ${collapsedState} observed`]
      }));
    }, [quantumState.superposition]);
    
    // Biometric stress detection through interaction patterns
    React.useEffect(() => {
      let startTime = Date.now();
      let interactionCount = 0;
      
      const detectInteractionPattern = (e: MouseEvent) => {
        interactionCount++;
        const currentTime = Date.now();
        const timeDelta = currentTime - startTime;
        
        // Calculate stress based on interaction velocity and erratic movement
        const velocity = Math.sqrt(e.movementX ** 2 + e.movementY ** 2);
        const stressIndicator = Math.min(velocity / 50, 1);
        const focusIndicator = Math.max(0, 1 - (interactionCount / (timeDelta / 1000)) * 0.1);
        
        setBiometricData(prev => ({
          ...prev,
          stressLevel: stressIndicator * 0.3 + prev.stressLevel * 0.7,
          focusState: focusIndicator * 0.3 + prev.focusState * 0.7,
          interactionPattern: stressIndicator > 0.6 ? 'stressed' : stressIndicator > 0.3 ? 'engaged' : 'calm',
          heartRate: Math.floor(60 + stressIndicator * 40 + Math.random() * 5)
        }));
        
        startTime = currentTime;
      };
      
      document.addEventListener('mousemove', detectInteractionPattern);
      return () => document.removeEventListener('mousemove', detectInteractionPattern);
    }, []);
    
    // Neuromorphic learning - synaptic weight adaptation
    React.useEffect(() => {
      const adaptWeights = () => {
        setNeuralWeights(prev => {
          const stressInfluence = biometricData.stressLevel;
          const focusInfluence = biometricData.focusState;
          
          return {
            ...prev,
            primary: Math.max(0.1, Math.min(1, prev.primary + (focusInfluence - 0.5) * prev.adaptationRate)),
            secondary: Math.max(0.1, Math.min(1, prev.secondary + (0.5 - stressInfluence) * prev.adaptationRate)),
            tertiary: Math.max(0.1, Math.min(1, prev.tertiary + (Math.random() - 0.5) * prev.adaptationRate * 0.5)),
            adaptationRate: Math.max(0.01, Math.min(0.3, prev.adaptationRate + (focusInfluence - stressInfluence) * 0.01))
          };
        });
      };
      
      const interval = setInterval(adaptWeights, 500);
      return () => clearInterval(interval);
    }, [biometricData]);
    
    // Multi-dimensional gesture recognition
    React.useEffect(() => {
      let gestureBuffer: any[] = [];
      const GESTURE_BUFFER_SIZE = 10;
      const GESTURE_PATTERNS = {
        circle: 'circular motion detected',
        swipe: 'directional swipe',
        pinch: 'pinch gesture',
        spiral: 'spiral pattern',
        figure8: 'infinity gesture'
      };
      
      const recognizeGesturePattern = (points: typeof gestureBuffer) => {
        if (points.length < 5) return null;
        
        // Calculate gesture metrics
        const totalDistance = points.reduce((sum, point, i) => {
          if (i === 0) return 0;
          const prev = points[i - 1];
          return sum + Math.sqrt((point.x - prev.x) ** 2 + (point.y - prev.y) ** 2);
        }, 0);
        
        const avgPressure = points.reduce((sum, p) => sum + p.pressure, 0) / points.length;
        const timeSpan = points[points.length - 1].timestamp - points[0].timestamp;
        const velocity = totalDistance / Math.max(timeSpan, 1);
        
        // Circular motion detection
        const center = {
          x: points.reduce((sum, p) => sum + p.x, 0) / points.length,
          y: points.reduce((sum, p) => sum + p.y, 0) / points.length
        };
        const radii = points.map(p => Math.sqrt((p.x - center.x) ** 2 + (p.y - center.y) ** 2));
        const avgRadius = radii.reduce((sum, r) => sum + r, 0) / radii.length;
        const radiusVariance = radii.reduce((sum, r) => sum + Math.abs(r - avgRadius), 0) / radii.length;
        
        if (radiusVariance < avgRadius * 0.3 && totalDistance > 200) {
          return 'circle';
        }
        
        // Directional swipe detection
        const startPoint = points[0];
        const endPoint = points[points.length - 1];
        const directDistance = Math.sqrt((endPoint.x - startPoint.x) ** 2 + (endPoint.y - startPoint.y) ** 2);
        if (directDistance > 150 && velocity > 0.5) {
          return 'swipe';
        }
        
        // Spiral detection (increasing radius)
        const radiusTrend = radii.slice(1).reduce((trend, r, i) => {
          return trend + (r > radii[i] ? 1 : -1);
        }, 0);
        if (Math.abs(radiusTrend) > radii.length * 0.6 && totalDistance > 300) {
          return 'spiral';
        }
        
        return null;
      };
      
      const handleAdvancedGesture = (e: MouseEvent | TouchEvent) => {
        const now = Date.now();
        let touches: any[] = [];
        
        if ('touches' in e) {
          // Multi-touch handling
          touches = Array.from(e.touches).map(touch => ({
            x: touch.clientX,
            y: touch.clientY,
            pressure: (touch as any).force || 0.5
          }));
        } else {
          // Simulate touch pressure based on movement speed
          const velocity = Math.sqrt(e.movementX ** 2 + e.movementY ** 2);
          touches = [{
            x: e.clientX,
            y: e.clientY,
            pressure: Math.min(0.2 + velocity / 50, 1)
          }];
        }
        
        // Update multi-touch points
        setGestureState(prev => ({ ...prev, multiTouchPoints: touches }));
        
        // Add to gesture buffer
        touches.forEach(touch => {
          gestureBuffer.push({
            x: touch.x,
            y: touch.y,
            timestamp: now,
            pressure: touch.pressure
          });
        });
        
        if (gestureBuffer.length > GESTURE_BUFFER_SIZE) {
          gestureBuffer = gestureBuffer.slice(-GESTURE_BUFFER_SIZE);
        }
        
        // Recognize gesture pattern
        const pattern = recognizeGesturePattern(gestureBuffer);
        if (pattern) {
          const intensity = touches.reduce((sum, t) => sum + t.pressure, 0) / touches.length;
          
          setGestureState(prev => ({
            ...prev,
            recognizedPattern: pattern,
            gestureHistory: [...prev.gestureHistory.slice(-9), {
              type: pattern,
              timestamp: now,
              intensity
            }],
            activeGestures: new Set([...prev.activeGestures, pattern])
          }));
          
          // Update consciousness with gesture recognition
          setConsciousness(prev => ({
            ...prev,
            stream: [...prev.stream.slice(-4), `Gesture recognized: ${GESTURE_PATTERNS[pattern as keyof typeof GESTURE_PATTERNS]} (${Math.round(intensity * 100)}% intensity)`]
          }));
          
          // Clear recognized pattern after delay
          setTimeout(() => {
            setGestureState(prev => ({
              ...prev,
              recognizedPattern: null,
              activeGestures: new Set([...prev.activeGestures].filter(g => g !== pattern))
            }));
          }, 2000);
        }
        
        // Simulate 3D gesture space
        const containerRect = document.body.getBoundingClientRect();
        const normalizedX = (touches[0]?.x || 0) / containerRect.width;
        const normalizedY = (touches[0]?.y || 0) / containerRect.height;
        const simulatedZ = (touches[0]?.pressure || 0.5) * 100;
        const rotation = Math.atan2(e.movementY || 0, e.movementX || 0) * (180 / Math.PI);
        
        setGestureState(prev => ({
          ...prev,
          gesture3D: {
            x: normalizedX * 200 - 100, // -100 to 100
            y: normalizedY * 200 - 100,
            z: simulatedZ,
            rotation
          }
        }));
      };
      
      document.addEventListener('mousemove', handleAdvancedGesture);
      document.addEventListener('touchmove', handleAdvancedGesture, { passive: false });
      document.addEventListener('touchstart', handleAdvancedGesture, { passive: false });
      
      return () => {
        document.removeEventListener('mousemove', handleAdvancedGesture);
        document.removeEventListener('touchmove', handleAdvancedGesture);
        document.removeEventListener('touchstart', handleAdvancedGesture);
      };
    }, []);
    
    // Ecosystem simulation - living UI components
    React.useEffect(() => {
      // Initialize ecosystem
      if (ecosystem.organisms.length === 0) {
        const initialOrganisms = [];
        const containerWidth = 800;
        const containerHeight = 400;
        
        // Create initial population
        for (let i = 0; i < 12; i++) {
          const types = ['predator', 'prey', 'producer', 'decomposer'] as const;
          const weights = [0.1, 0.4, 0.4, 0.1]; // Population distribution
          
          let type: 'predator' | 'prey' | 'producer' | 'decomposer';
          const rand = Math.random();
          if (rand < weights[0]) type = 'predator';
          else if (rand < weights[0] + weights[1]) type = 'prey';
          else if (rand < weights[0] + weights[1] + weights[2]) type = 'producer';
          else type = 'decomposer';
          
          initialOrganisms.push({
            id: `organism-${i}`,
            type,
            x: Math.random() * containerWidth,
            y: Math.random() * containerHeight,
            size: type === 'predator' ? 12 : type === 'prey' ? 8 : type === 'producer' ? 15 : 6,
            energy: Math.random() * 50 + 50,
            age: 0,
            connections: [],
            health: 1
          });
        }
        
        setEcosystem(prev => ({ ...prev, organisms: initialOrganisms }));
      }
      
      const simulateEcosystem = () => {
        setEcosystem(prev => {
          const newOrganisms = prev.organisms.map(organism => {
            let newOrganism = { ...organism };
            
            // Age and energy decay
            newOrganism.age += 1;
            newOrganism.energy -= Math.random() * 2 + 1;
            
            // Movement based on type
            const speed = organism.type === 'predator' ? 2 : organism.type === 'prey' ? 1.5 : 0.5;
            const direction = Math.random() * Math.PI * 2;
            
            newOrganism.x += Math.cos(direction) * speed;
            newOrganism.y += Math.sin(direction) * speed;
            
            // Boundary constraints
            newOrganism.x = Math.max(0, Math.min(800, newOrganism.x));
            newOrganism.y = Math.max(0, Math.min(400, newOrganism.y));
            
            // Type-specific behaviors
            switch (organism.type) {
              case 'producer':
                // Producers gain energy from resources
                newOrganism.energy += prev.resources.light * 10 + prev.resources.nutrients * 5;
                newOrganism.size = Math.min(20, Math.max(10, newOrganism.energy / 5));
                break;
                
              case 'prey':
                // Prey feed on producers
                const nearbyProducers = prev.organisms.filter(o => 
                  o.type === 'producer' && 
                  Math.sqrt((o.x - organism.x) ** 2 + (o.y - organism.y) ** 2) < 50
                );
                if (nearbyProducers.length > 0) {
                  newOrganism.energy += 15;
                }
                break;
                
              case 'predator':
                // Predators hunt prey
                const nearbyPrey = prev.organisms.filter(o => 
                  o.type === 'prey' && 
                  Math.sqrt((o.x - organism.x) ** 2 + (o.y - organism.y) ** 2) < 40
                );
                if (nearbyPrey.length > 0) {
                  newOrganism.energy += 25;
                }
                break;
                
              case 'decomposer':
                // Decomposers process dead organisms and recycle nutrients
                newOrganism.energy += 3;
                break;
            }
            
            // Health based on energy levels
            newOrganism.health = Math.max(0, Math.min(1, newOrganism.energy / 100));
            
            // Death condition
            if (newOrganism.energy <= 0 || newOrganism.age > 1000) {
              return null;
            }
            
            return newOrganism;
          }).filter(Boolean) as typeof prev.organisms;
          
          // Reproduction for healthy organisms
          const reproductionCandidates = newOrganisms.filter(o => o.energy > 80 && o.health > 0.8);
          const newBorns: typeof newOrganisms = [];
          
          reproductionCandidates.forEach(parent => {
            if (Math.random() < 0.02) { // 2% reproduction chance
              newBorns.push({
                id: `organism-${Date.now()}-${Math.random()}`,
                type: parent.type,
                x: parent.x + (Math.random() - 0.5) * 20,
                y: parent.y + (Math.random() - 0.5) * 20,
                size: parent.size * 0.7,
                energy: parent.energy * 0.3,
                age: 0,
                connections: [],
                health: 1
              });
              
              // Parent loses energy from reproduction
              parent.energy -= 20;
            }
          });
          
          const allOrganisms = [...newOrganisms, ...newBorns];
          
          // Update population counts
          const population = {
            predators: allOrganisms.filter(o => o.type === 'predator').length,
            prey: allOrganisms.filter(o => o.type === 'prey').length,
            producers: allOrganisms.filter(o => o.type === 'producer').length,
            decomposers: allOrganisms.filter(o => o.type === 'decomposer').length
          };
          
          // Calculate biodiversity (Shannon diversity index)
          const total = Object.values(population).reduce((sum, count) => sum + count, 0);
          const biodiversity = total > 0 ? Object.values(population).reduce((h, count) => {
            if (count === 0) return h;
            const p = count / total;
            return h - p * Math.log2(p);
          }, 0) : 0;
          
          // Ecosystem health based on balance
          const idealRatios = { predators: 0.1, prey: 0.4, producers: 0.4, decomposers: 0.1 };
          const actualRatios = total > 0 ? {
            predators: population.predators / total,
            prey: population.prey / total,
            producers: population.producers / total,
            decomposers: population.decomposers / total
          } : { predators: 0, prey: 0, producers: 0, decomposers: 0 };
          
          const ecosystemHealth = 1 - Object.keys(idealRatios).reduce((diff, key) => {
            const k = key as keyof typeof idealRatios;
            return diff + Math.abs(idealRatios[k] - actualRatios[k]);
          }, 0) / 2;
          
          // Resource fluctuation
          const resources = {
            light: Math.max(0.3, Math.min(1, prev.resources.light + (Math.random() - 0.5) * 0.1)),
            nutrients: Math.max(0.2, Math.min(1, prev.resources.nutrients + (Math.random() - 0.5) * 0.08)),
            water: Math.max(0.4, Math.min(1, prev.resources.water + (Math.random() - 0.5) * 0.06))
          };
          
          return {
            organisms: allOrganisms,
            population,
            biodiversity,
            ecosystem_health: ecosystemHealth,
            resources
          };
        });
        
        // Update consciousness with ecosystem events
        setConsciousness(prevConsciousness => ({
          ...prevConsciousness,
          stream: [...prevConsciousness.stream.slice(-4), `Ecosystem cycle: ${ecosystem.organisms.length} organisms, health: ${Math.round(ecosystem.ecosystem_health * 100)}%`]
        }));
      };
      
      const interval = setInterval(simulateEcosystem, 1000);
      return () => clearInterval(interval);
    }, [ecosystem.organisms.length]);
    
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 p-8 relative overflow-hidden">
        {/* Quantum field visualization */}
        <div className="absolute inset-0 pointer-events-none">
          {[...Array(20)].map((_, i) => (
            <div 
              key={i}
              className="absolute w-1 h-1 bg-cyan-400/30 rounded-full"
              style={{
                left: `${Math.random() * 100}%`,
                top: `${Math.random() * 100}%`,
                animation: `quantumFluctuate ${2 + Math.random() * 3}s infinite ease-in-out`,
                animationDelay: `${Math.random() * 2}s`
              }}
            />
          ))}
        </div>
        
        <div className="max-w-7xl mx-auto relative z-10">
          <div className="text-center mb-12">
            <div className="inline-flex items-center gap-3 mb-6 px-5 py-3 rounded-full bg-white/5 backdrop-blur-xl border border-white/10">
              <div 
                className="w-3 h-3 rounded-full"
                style={{
                  background: quantumState.superposition 
                    ? 'radial-gradient(circle, #06b6d4, #8b5cf6, #06b6d4)' 
                    : '#10b981',
                  animation: quantumState.superposition ? 'spin 2s linear infinite' : 'none'
                }}
              />
              <span className="text-sm text-white/70 font-medium tracking-wider">
                {quantumState.superposition ? 'QUANTUM SUPERPOSITION ACTIVE' : 'QUANTUM STATE COLLAPSED'}
              </span>
            </div>
            <h2 className="text-5xl font-bold mb-4 bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent">
              Quantum-Neuromorphic Interface
            </h2>
            <p className="text-lg text-white/60 max-w-3xl mx-auto leading-relaxed">
              Experience UI components in quantum superposition with biometric adaptation and neuromorphic learning
            </p>
          </div>

          {/* Biometric Dashboard */}
          <div className="grid grid-cols-1 lg:grid-cols-5 gap-6 mb-12">
            <div className="bg-white/8 backdrop-blur-xl rounded-2xl p-6 border border-white/10">
              <div className="flex items-center gap-3 mb-4">
                <div className={`w-3 h-3 rounded-full ${
                  biometricData.stressLevel < 0.3 ? 'bg-green-400' : 
                  biometricData.stressLevel < 0.6 ? 'bg-yellow-400' : 'bg-red-400'
                } animate-pulse`} />
                <h3 className="text-white font-semibold">Stress Level</h3>
              </div>
              <div className="space-y-2">
                <div className="flex justify-between text-sm text-white/70">
                  <span>Current</span>
                  <span>{Math.round(biometricData.stressLevel * 100)}%</span>
                </div>
                <div className="w-full h-2 bg-white/20 rounded-full overflow-hidden">
                  <div 
                    className="h-full bg-gradient-to-r from-green-400 via-yellow-400 to-red-400 rounded-full transition-all duration-500"
                    style={{ width: `${biometricData.stressLevel * 100}%` }}
                  />
                </div>
                <div className="text-xs text-white/50">{biometricData.interactionPattern}</div>
              </div>
            </div>

            <div className="bg-white/8 backdrop-blur-xl rounded-2xl p-6 border border-white/10">
              <div className="flex items-center gap-3 mb-4">
                <div className="w-3 h-3 bg-blue-400 rounded-full animate-pulse" />
                <h3 className="text-white font-semibold">Focus State</h3>
              </div>
              <div className="space-y-2">
                <div className="flex justify-between text-sm text-white/70">
                  <span>Cognitive Load</span>
                  <span>{Math.round(biometricData.focusState * 100)}%</span>
                </div>
                <div className="w-full h-2 bg-white/20 rounded-full overflow-hidden">
                  <div 
                    className="h-full bg-blue-400 rounded-full transition-all duration-500"
                    style={{ width: `${biometricData.focusState * 100}%` }}
                  />
                </div>
                <div className="text-xs text-white/50">♥ {biometricData.heartRate} BPM</div>
              </div>
            </div>

            <div className="bg-white/8 backdrop-blur-xl rounded-2xl p-6 border border-white/10">
              <div className="flex items-center gap-3 mb-4">
                <div className="w-3 h-3 bg-purple-400 rounded-full animate-pulse" />
                <h3 className="text-white font-semibold">Neural Weights</h3>
              </div>
              <div className="space-y-2">
                {Object.entries(neuralWeights).slice(0, 3).map(([key, weight]) => (
                  <div key={key} className="flex items-center gap-2">
                    <span className="text-xs text-white/60 w-12 capitalize">{key}</span>
                    <div className="flex-1 h-1.5 bg-white/20 rounded-full overflow-hidden">
                      <div 
                        className="h-full bg-purple-400 rounded-full transition-all duration-300"
                        style={{ width: `${weight * 100}%` }}
                      />
                    </div>
                    <span className="text-xs text-white/70 w-8">{Math.round(weight * 100)}</span>
                  </div>
                ))}
              </div>
            </div>

            <div className="bg-white/8 backdrop-blur-xl rounded-2xl p-6 border border-white/10">
              <div className="flex items-center gap-3 mb-4">
                <div className="w-3 h-3 bg-cyan-400 rounded-full animate-pulse" />
                <h3 className="text-white font-semibold">Consciousness</h3>
              </div>
              <div className="space-y-1">
                {consciousness.stream.slice(-3).map((thought, i) => (
                  <div key={i} className="text-xs text-white/60 truncate">
                    {thought}
                  </div>
                ))}
                <div className="text-xs text-white/50 mt-2">
                  Coherence: {Math.round(consciousness.coherence * 100)}%
                </div>
              </div>
            </div>

            <div className="bg-white/8 backdrop-blur-xl rounded-2xl p-6 border border-white/10">
              <div className="flex items-center gap-3 mb-4">
                <div className={`w-3 h-3 rounded-full animate-pulse ${
                  gestureState.recognizedPattern ? 'bg-orange-400' : 'bg-gray-400'
                }`} />
                <h3 className="text-white font-semibold">Gestures</h3>
              </div>
              <div className="space-y-2">
                {/* 3D Gesture Space */}
                <div className="text-xs text-white/60 mb-2">3D Space:</div>
                <div className="flex gap-1 text-xs text-white/70">
                  <span>X:{Math.round(gestureState.gesture3D.x)}</span>
                  <span>Y:{Math.round(gestureState.gesture3D.y)}</span>
                  <span>Z:{Math.round(gestureState.gesture3D.z)}</span>
                </div>
                
                {/* Multi-touch points */}
                <div className="text-xs text-white/60 mb-1">
                  Touch: {gestureState.multiTouchPoints.length} point{gestureState.multiTouchPoints.length !== 1 ? 's' : ''}
                </div>
                
                {/* Active gesture */}
                {gestureState.recognizedPattern && (
                  <div className="text-xs text-orange-300 font-medium capitalize animate-pulse">
                    {gestureState.recognizedPattern}
                  </div>
                )}
                
                {/* Gesture history */}
                <div className="space-y-1 max-h-16 overflow-y-auto">
                  {gestureState.gestureHistory.slice(-2).map((gesture, i) => (
                    <div key={i} className="text-xs text-white/50 flex justify-between">
                      <span className="capitalize">{gesture.type}</span>
                      <span>{Math.round(gesture.intensity * 100)}%</span>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </div>

          {/* Quantum Superposition Interface */}
          <div className="bg-white/8 backdrop-blur-xl rounded-3xl p-8 border border-white/10 mb-12">
            <h3 className="text-2xl font-semibold text-white text-center mb-8">Quantum UI States</h3>
            
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-8 mb-8">
              {/* Quantum UI Component in Superposition */}
              <div className="lg:col-span-2 space-y-6">
                <div 
                  className="relative h-64 rounded-2xl overflow-hidden transition-all duration-1000 cursor-pointer group"
                  onClick={measureQuantumState}
                  style={{
                    background: quantumState.superposition
                      ? `linear-gradient(45deg, 
                          rgba(6, 182, 212, ${quantumState.probability.state1}) 0%, 
                          rgba(139, 92, 246, ${quantumState.probability.state2}) 50%, 
                          rgba(236, 72, 153, ${quantumState.probability.state3}) 100%)`
                      : quantumState.collapsedState === 'state1' 
                        ? 'linear-gradient(135deg, #06b6d4, #0891b2)'
                        : quantumState.collapsedState === 'state2'
                        ? 'linear-gradient(135deg, #8b5cf6, #7c3aed)'
                        : 'linear-gradient(135deg, #ec4899, #db2777)'
                  }}
                >
                  {/* Quantum interference patterns */}
                  {quantumState.superposition && (
                    <div className="absolute inset-0">
                      <div className="absolute inset-0 bg-gradient-to-r from-transparent via-white/10 to-transparent animate-pulse" />
                      <div className="absolute inset-0 bg-[url('data:image/svg+xml,%3Csvg width="60" height="60" viewBox="0 0 60 60" xmlns="http://www.w3.org/2000/svg"%3E%3Cg fill="none" fill-rule="evenodd"%3E%3Cg fill="%23ffffff" fill-opacity="0.1"%3E%3Cpath d="M36 34v-4h-2v4h-4v2h4v4h2v-4h4v-2h-4zm0-30V0h-2v4h-4v2h4v4h2V6h4V4h-4zM6 34v-4H4v4H0v2h4v4h2v-4h4v-2H6zM6 4V0H4v4H0v2h4v4h2V6h4V4H6z"/%3E%3C/g%3E%3C/g%3E%3C/svg%3E')] opacity-20" />
                    </div>
                  )}
                  
                  {/* State probability indicators */}
                  {quantumState.superposition && (
                    <div className="absolute top-4 left-4 right-4">
                      <div className="flex justify-between text-xs text-white/80">
                        <span>State 1: {Math.round(quantumState.probability.state1 * 100)}%</span>
                        <span>State 2: {Math.round(quantumState.probability.state2 * 100)}%</span>
                        <span>State 3: {Math.round(quantumState.probability.state3 * 100)}%</span>
                      </div>
                    </div>
                  )}
                  
                  {/* Content based on quantum state */}
                  <div className="absolute inset-0 flex items-center justify-center">
                    {quantumState.superposition ? (
                      <div className="text-center">
                        <div className="text-6xl mb-4 animate-pulse">⚛️</div>
                        <div className="text-white font-bold text-xl mb-2">Quantum Superposition</div>
                        <div className="text-white/70 text-sm">Click to measure and collapse state</div>
                      </div>
                    ) : (
                      <div className="text-center">
                        <div className="text-6xl mb-4">
                          {quantumState.collapsedState === 'state1' && '🌊'}
                          {quantumState.collapsedState === 'state2' && '🧠'}
                          {quantumState.collapsedState === 'state3' && '💝'}
                        </div>
                        <div className="text-white font-bold text-xl mb-2">
                          {quantumState.collapsedState === 'state1' && 'Flow State'}
                          {quantumState.collapsedState === 'state2' && 'Mind State'}
                          {quantumState.collapsedState === 'state3' && 'Heart State'}
                        </div>
                        <div className="text-white/70 text-sm">State collapsed and measured</div>
                      </div>
                    )}
                  </div>
                  
                  {/* Reset button */}
                  {!quantumState.superposition && (
                    <button 
                      className="absolute bottom-4 right-4 px-4 py-2 bg-white/20 hover:bg-white/30 backdrop-blur border border-white/30 rounded-lg text-white text-sm font-medium transition-all duration-300"
                      onClick={(e) => {
                        e.stopPropagation();
                        setQuantumState(prev => ({ ...prev, superposition: true, collapsedState: null, measurement: false }));
                      }}
                    >
                      Reset Superposition
                    </button>
                  )}
                </div>
                
                {/* Molecular bonding interaction */}
                <div className="grid grid-cols-3 gap-4">
                  {[0, 1, 2].map(i => (
                    <div 
                      key={i}
                      className={`h-20 rounded-xl relative transition-all duration-500 cursor-pointer group ${
                        quantumState.entangled.has(i) 
                          ? 'bg-gradient-to-br from-purple-500/30 to-pink-500/30 border border-purple-400/50' 
                          : 'bg-white/10 hover:bg-white/15 border border-white/20'
                      }`}
                      onClick={() => {
                        setQuantumState(prev => ({
                          ...prev,
                          entangled: prev.entangled.has(i) 
                            ? new Set([...prev.entangled].filter(x => x !== i))
                            : new Set([...prev.entangled, i])
                        }));
                      }}
                    >
                      <div className="absolute inset-0 flex items-center justify-center">
                        <div className={`w-6 h-6 rounded-full transition-all duration-300 ${
                          quantumState.entangled.has(i) 
                            ? 'bg-purple-400 animate-pulse' 
                            : 'bg-white/40 group-hover:bg-white/60'
                        }`} />
                      </div>
                      
                      {/* Bonding lines */}
                      {quantumState.entangled.has(i) && quantumState.entangled.size > 1 && (
                        <div className="absolute -top-2 -bottom-2 left-1/2 w-0.5 bg-purple-400/50 animate-pulse" />
                      )}
                    </div>
                  ))}
                </div>
              </div>

              {/* Consciousness Stream */}
              <div className="bg-white/5 rounded-2xl p-6">
                <h4 className="text-white font-semibold mb-4">Consciousness Stream</h4>
                <div className="space-y-2 max-h-48 overflow-y-auto">
                  {consciousness.stream.map((thought, i) => (
                    <div 
                      key={i}
                      className="text-sm text-white/70 p-2 bg-white/5 rounded-lg animate-slide-in-right"
                      style={{ animationDelay: `${i * 100}ms` }}
                    >
                      {thought}
                    </div>
                  ))}
                </div>
                
                {/* Real-time thought generation */}
                <div className="mt-4 p-3 bg-gradient-to-r from-cyan-500/10 to-purple-500/10 rounded-lg">
                  <div className="flex items-center gap-2">
                    <div className="w-2 h-2 bg-cyan-400 rounded-full animate-bounce" />
                    <span className="text-white/60 text-xs">Generating consciousness...</span>
                  </div>
                </div>
              </div>
            </div>

            {/* Quantum Measurement Controls */}
            <div className="text-center">
              <button 
                className={`px-8 py-4 rounded-xl font-semibold transition-all duration-500 ${
                  quantumState.superposition
                    ? 'bg-gradient-to-r from-cyan-500 to-purple-500 text-white hover:scale-105'
                    : 'bg-white/10 text-white/50 cursor-not-allowed'
                }`}
                onClick={measureQuantumState}
                disabled={!quantumState.superposition}
              >
                Perform Quantum Measurement
              </button>
            </div>
          </div>

          {/* Living Ecosystem Interface */}
          <div className="bg-white/8 backdrop-blur-xl rounded-3xl p-8 border border-white/10 mb-12">
            <h3 className="text-2xl font-semibold text-white text-center mb-8">Living Ecosystem Interface</h3>
            
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
              {/* Ecosystem Visualization */}
              <div className="lg:col-span-2">
                <div 
                  className="relative w-full h-64 bg-gradient-to-br from-green-900/30 via-blue-900/20 to-brown-900/30 rounded-2xl border border-white/10 overflow-hidden"
                  style={{ backgroundColor: `rgba(34, 197, 94, ${ecosystem.resources.light * 0.1})` }}
                >
                  {/* Resource indicators */}
                  <div className="absolute top-2 left-2 space-y-1 text-xs">
                    <div className="flex items-center gap-2">
                      <div className="w-2 h-2 bg-yellow-400 rounded-full" />
                      <span className="text-white/70">Light: {Math.round(ecosystem.resources.light * 100)}%</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <div className="w-2 h-2 bg-brown-400 rounded-full" />
                      <span className="text-white/70">Nutrients: {Math.round(ecosystem.resources.nutrients * 100)}%</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <div className="w-2 h-2 bg-blue-400 rounded-full" />
                      <span className="text-white/70">Water: {Math.round(ecosystem.resources.water * 100)}%</span>
                    </div>
                  </div>
                  
                  {/* Population stats */}
                  <div className="absolute top-2 right-2 text-xs text-white/70 space-y-1">
                    <div>🦁 {ecosystem.population.predators}</div>
                    <div>🐰 {ecosystem.population.prey}</div>
                    <div>🌱 {ecosystem.population.producers}</div>
                    <div>🍄 {ecosystem.population.decomposers}</div>
                  </div>
                  
                  {/* Living organisms */}
                  {ecosystem.organisms.map(organism => {
                    const opacity = Math.max(0.3, organism.health);
                    const typeColors = {
                      predator: '#ef4444',
                      prey: '#f59e0b',
                      producer: '#10b981',
                      decomposer: '#8b5cf6'
                    };
                    const typeEmojis = {
                      predator: '🦁',
                      prey: '🐰',
                      producer: '🌱',
                      decomposer: '🍄'
                    };
                    
                    return (
                      <div
                        key={organism.id}
                        className="absolute transition-all duration-1000 ease-in-out hover:scale-125"
                        style={{
                          left: `${(organism.x / 800) * 100}%`,
                          top: `${(organism.y / 400) * 100}%`,
                          fontSize: `${Math.max(8, organism.size)}px`,
                          opacity,
                          transform: `translate(-50%, -50%)`,
                          filter: `drop-shadow(0 0 ${organism.energy / 10}px ${typeColors[organism.type]})`
                        }}
                        title={`${organism.type}: Energy ${Math.round(organism.energy)}, Age ${organism.age}`}
                      >
                        {typeEmojis[organism.type]}
                        
                        {/* Energy bar */}
                        <div 
                          className="absolute -bottom-2 left-1/2 w-4 h-0.5 bg-white/20 rounded-full transform -translate-x-1/2"
                        >
                          <div 
                            className="h-full rounded-full transition-all duration-500"
                            style={{ 
                              width: `${Math.max(0, Math.min(100, organism.energy))}%`,
                              backgroundColor: organism.energy > 50 ? '#10b981' : organism.energy > 20 ? '#f59e0b' : '#ef4444'
                            }}
                          />
                        </div>
                        
                        {/* Connection lines to nearby organisms */}
                        {organism.connections.slice(0, 2).map((connectionId, i) => {
                          const connectedOrganism = ecosystem.organisms.find(o => o.id === connectionId);
                          if (!connectedOrganism) return null;
                          
                          const dx = connectedOrganism.x - organism.x;
                          const dy = connectedOrganism.y - organism.y;
                          const distance = Math.sqrt(dx ** 2 + dy ** 2);
                          const angle = Math.atan2(dy, dx) * (180 / Math.PI);
                          
                          if (distance > 100) return null;
                          
                          return (
                            <div
                              key={i}
                              className="absolute top-1/2 left-1/2 origin-left opacity-30"
                              style={{
                                width: `${distance * 0.125}px`,
                                height: '1px',
                                backgroundColor: typeColors[organism.type],
                                transform: `rotate(${angle}deg)`,
                                transformOrigin: '0 50%'
                              }}
                            />
                          );
                        })}
                      </div>
                    );
                  })}
                  
                  {/* Ecosystem flow lines */}
                  <div className="absolute inset-0 pointer-events-none">
                    {[...Array(5)].map((_, i) => (
                      <div
                        key={i}
                        className="absolute animate-pulse"
                        style={{
                          left: `${Math.random() * 80 + 10}%`,
                          top: `${Math.random() * 80 + 10}%`,
                          width: '2px',
                          height: '20px',
                          background: `linear-gradient(to bottom, transparent, rgba(34, 197, 94, ${ecosystem.ecosystem_health * 0.5}), transparent)`,
                          animationDelay: `${i * 0.5}s`
                        }}
                      />
                    ))}
                  </div>
                </div>
                
                {/* Ecosystem controls */}
                <div className="mt-4 flex gap-4">
                  <button 
                    className="px-4 py-2 bg-green-500/20 hover:bg-green-500/30 border border-green-500/50 rounded-lg text-green-300 text-sm font-medium transition-all duration-300"
                    onClick={() => {
                      // Add nutrients to boost producer growth
                      setEcosystem(prev => ({
                        ...prev,
                        resources: { ...prev.resources, nutrients: Math.min(1, prev.resources.nutrients + 0.2) }
                      }));
                    }}
                  >
                    + Add Nutrients
                  </button>
                  <button 
                    className="px-4 py-2 bg-blue-500/20 hover:bg-blue-500/30 border border-blue-500/50 rounded-lg text-blue-300 text-sm font-medium transition-all duration-300"
                    onClick={() => {
                      // Reset ecosystem to initial state
                      setEcosystem({
                        organisms: [],
                        resources: { light: 0.8, nutrients: 0.6, water: 0.7 },
                        population: { predators: 0, prey: 0, producers: 0, decomposers: 0 },
                        biodiversity: 0,
                        ecosystem_health: 0.75
                      });
                    }}
                  >
                    Reset Ecosystem
                  </button>
                </div>
              </div>
              
              {/* Ecosystem Statistics */}
              <div className="space-y-6">
                <div className="bg-white/5 rounded-2xl p-6">
                  <h4 className="text-white font-semibold mb-4 flex items-center gap-2">
                    <div className="w-3 h-3 bg-green-400 rounded-full animate-pulse" />
                    Ecosystem Health
                  </h4>
                  <div className="space-y-3">
                    <div>
                      <div className="flex justify-between text-sm mb-1">
                        <span className="text-white/70">Overall Health</span>
                        <span className="text-white">{Math.round(ecosystem.ecosystem_health * 100)}%</span>
                      </div>
                      <div className="w-full h-2 bg-white/20 rounded-full overflow-hidden">
                        <div 
                          className="h-full bg-gradient-to-r from-red-400 via-yellow-400 to-green-400 rounded-full transition-all duration-1000"
                          style={{ width: `${ecosystem.ecosystem_health * 100}%` }}
                        />
                      </div>
                    </div>
                    
                    <div>
                      <div className="flex justify-between text-sm mb-1">
                        <span className="text-white/70">Biodiversity</span>
                        <span className="text-white">{ecosystem.biodiversity.toFixed(2)}</span>
                      </div>
                      <div className="w-full h-2 bg-white/20 rounded-full overflow-hidden">
                        <div 
                          className="h-full bg-purple-400 rounded-full transition-all duration-1000"
                          style={{ width: `${Math.min(100, ecosystem.biodiversity * 50)}%` }}
                        />
                      </div>
                    </div>
                    
                    <div>
                      <div className="flex justify-between text-sm mb-1">
                        <span className="text-white/70">Total Population</span>
                        <span className="text-white">{ecosystem.organisms.length}</span>
                      </div>
                      <div className="w-full h-2 bg-white/20 rounded-full overflow-hidden">
                        <div 
                          className="h-full bg-cyan-400 rounded-full transition-all duration-1000"
                          style={{ width: `${Math.min(100, ecosystem.organisms.length * 4)}%` }}
                        />
                      </div>
                    </div>
                  </div>
                </div>
                
                {/* Population breakdown */}
                <div className="bg-white/5 rounded-2xl p-6">
                  <h4 className="text-white font-semibold mb-4">Population</h4>
                  <div className="space-y-2">
                    {[
                      { type: 'Predators', count: ecosystem.population.predators, color: 'red', emoji: '🦁' },
                      { type: 'Prey', count: ecosystem.population.prey, color: 'orange', emoji: '🐰' },
                      { type: 'Producers', count: ecosystem.population.producers, color: 'green', emoji: '🌱' },
                      { type: 'Decomposers', count: ecosystem.population.decomposers, color: 'purple', emoji: '🍄' }
                    ].map(pop => (
                      <div key={pop.type} className="flex items-center justify-between text-sm">
                        <div className="flex items-center gap-2">
                          <span className="text-lg">{pop.emoji}</span>
                          <span className="text-white/70">{pop.type}</span>
                        </div>
                        <span className="text-white font-medium">{pop.count}</span>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* Advanced Features */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-6">
            {[
              { icon: '⚛️', title: 'Quantum States', desc: 'UI components in superposition until measured' },
              { icon: '🧬', title: 'Biometric Adaptation', desc: 'Real-time stress and focus detection through interaction' },
              { icon: '🧠', title: 'Neural Learning', desc: 'Synaptic weight adaptation based on user behavior' },
              { icon: '🌌', title: 'Consciousness Stream', desc: 'Continuous thought-like interface evolution' },
              { icon: '🌿', title: 'Living Ecosystem', desc: 'Self-organizing components that grow, adapt, and interact like organisms' }
            ].map((feature, i) => (
              <div 
                key={feature.title}
                className="bg-white/5 backdrop-blur border border-white/10 rounded-2xl p-6 text-center transition-all duration-500 hover:bg-white/8 hover:scale-105"
                style={{ 
                  animationDelay: `${i * 150}ms`,
                  animation: 'slideUpStagger 0.8s cubic-bezier(0.16, 1, 0.3, 1) forwards'
                }}
              >
                <div className="text-3xl mb-3">{feature.icon}</div>
                <h4 className="text-white font-semibold mb-2">{feature.title}</h4>
                <p className="text-white/60 text-sm leading-relaxed">{feature.desc}</p>
              </div>
            ))}
          </div>
        </div>
      </div>
    );
  },
};
